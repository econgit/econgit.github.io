<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>econgit</title>
    <link>https://econgit.github.io/ja/index.xml</link>
    <description>Recent content on econgit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 24 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://econgit.github.io/ja/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>なぜプログラムを書くのか</title>
      <link>https://econgit.github.io/ja/post/2017/03/why-write-a-code/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://econgit.github.io/ja/post/2017/03/why-write-a-code/</guid>
      <description>&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;こんにちは&lt;/h2&gt;
&lt;p&gt;econgit は git，GitHub，R，Python などデータ分析界隈で確固たる地位を固めてきた技術を，経済学教育に取り入れようという試みです。神戸大学経済学研究科の教員有志とTA により試験的に実施されています。あわよくばさらなる広まりを期待しています。&lt;/p&gt;
&lt;p&gt;さて，なぜこんなことをしなければいけないのか？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;再現性に対する過小評価&lt;/h2&gt;
&lt;p&gt;プログラムで解決できる仕事はできるだけプログラムにやらせる，というのはよい心がけです。なぜなら，手作業は記録が難しく，レポートの再現可能性を損なってしまうから。例えば，日本の GDP の経年変化をグラフにしたいとしましょう。&lt;a href=&#34;http://www.esri.cao.go.jp/jp/sna/data/data_list/kakuhou/files/h27/h27_kaku_top.html#c1&#34;&gt;内閣府のページ&lt;/a&gt; から，例えば「国内総生産勘定」という項目をクリックすると次のようなExcelファイルをダウンロードできます。&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../images/post/2017-03/2017-03-20-gdp.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;これに&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;27行目の数字を選択して，&lt;/li&gt;
&lt;li&gt;チャートの適当なボタンをクリック&lt;/li&gt;
&lt;li&gt;横軸のデータとして，7行目の数字を選ぶ&lt;/li&gt;
&lt;li&gt;グラフを右クリックして保存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という手続きを行なってできたものが，次のグラフです。&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../images/post/2017-03/2017-03-20-graph.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;実に直感的ですね。しかし，このグラフはそのままでは使えないでしょう。 縦軸に単位が書いてないですし，横軸が少々つまりすぎて見づらいです。 レポートに貼り付けるような場合には，通常もう少し装飾的な要素を追加してから使用すると思います。&lt;/p&gt;
&lt;p&gt;ダウンロードから上の図を作るまでの工程は，友人や同僚に指示しても再現できそうですが，次のグラフはどうでしょうか。&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../images/post/2017-03/2017-03-20-graph2.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;私自身がどのように作ったかというと，&lt;strong&gt;「手探りでやってみたらなんとなく上手く行ったのでこれを採用しよう」&lt;/strong&gt;と，軽い気持ちで選んだオプションを使っています。これを再現するのは一筋縄にいきそうにありません。実際にはこのようなグラフが他の人に再現できないとしても問題になることはないのでしょうが，一番の問題は，&lt;strong&gt;自分にも再現ができない&lt;/strong&gt;ということです。&lt;/p&gt;
&lt;p&gt;次のような経験はないでしょうか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先生に「最新の確報を使ってグラフを作り直しなさい」と言われたけど，自分でもどうやって作ったのか忘れてしまったなあ&lt;/li&gt;
&lt;li&gt;作り直そうと思ったら何時間もかかってしまった（or うまくいかなかった）&lt;/li&gt;
&lt;li&gt;このデータどこでダウンロードしてきたかなあ？？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そこでプログラミングの出番です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;小さくはじめよう！&lt;/h2&gt;
&lt;p&gt;プログラミングは，同じ仕事をいつでも同じようにしてくれる強い味方です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同様の図を違うデータで作りたい&lt;/li&gt;
&lt;li&gt;他人が同じ図を作れるようにドキュメント化したい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった問題を解決してくれます。Excel でもプログラミング（VBA）をできるのですが，あまり普及していないようなので，思い切って環境を変えましょう。 データ分析と文字列操作が中心になるので，R や Python という扱いやすい言語を使うのがいいでしょう。 データサイエンス界隈では，R と Python を使ってビッグデータ・機械学習・ディープラーニングなどなどという話題が飛び交っています。（詳しくは知りません）。&lt;/p&gt;
&lt;p&gt;プログラムはスケールを選びません。したがって，&lt;strong&gt;スモールデータ&lt;/strong&gt;に気負いすることもありません。とにかく最初のコードを書きましょう。&lt;/p&gt;
&lt;p&gt;さて，先程のような図を描くコードはRでは次のように書くことができます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ダウンロードと読み込み
library(readxl)
download.file(&amp;quot;http://www.esri.cao.go.jp/jp/sna/data/data_list/kakuhou/files/h27/tables/27a1_jp.xls&amp;quot;,
              &amp;quot;27a1_jp.xls&amp;quot;)
gdp_xls &amp;lt;- read_excel(&amp;quot;27a1_jp.xls&amp;quot;, sheet = 1, skip = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

gdp0 &amp;lt;- gdp_xls[c(2, 22), 2:ncol(gdp_xls)]

gdp &amp;lt;-
  as_tibble(cbind(t(gdp0))) %&amp;gt;%
  transmute(year = V1, gdp = V2)

ggplot(gdp, aes(x = year, y = gdp, label = gdp)) +
  geom_line() + geom_point() + 
  geom_text(vjust = 0, nudge_y = 800) + 
  xlab(&amp;quot;GDP (10億円)&amp;quot;) + ylab(&amp;quot;年度&amp;quot;) + 
  theme_light(base_family = &amp;quot;IPAGothic&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../post/2017-03-24-why-write-a-code.ja_files/figure-html/unnamed-chunk-3-1.svg&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最後の図は，ここで書かれたコードによる出力です。環境を整えさえすれば，友人や1年後の自分がこの図を再現することも容易なはずです。（パッケージの仕様が大きく変わらない限り，という註釈付きですが・・・・それは Excel を使っていても同じことでしょう）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;経済学部生に一番に学んで欲しいことはもちろん経済学そのものであってプログラミングではないのですが，それでもプログラミングを学んで欲しいと思うのは，多少のコーディングスキル（特に文字列操作・ファイル操作）を身につけておけば余分な仕事を減らせるケースが沢山あると思うからです。半年後の自分のために，今の作業をコードにして残しましょう。&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>サンプル</title>
      <link>https://econgit.github.io/ja/post/2017/02/sample/</link>
      <pubDate>Fri, 17 Feb 2017 13:45:42 +0900</pubDate>
      
      <guid>https://econgit.github.io/ja/post/2017/02/sample/</guid>
      <description>&lt;p&gt;This is a sample post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>econgit について</title>
      <link>https://econgit.github.io/ja/about/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://econgit.github.io/ja/about/</guid>
      <description>&lt;p&gt;This is econgit website.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>