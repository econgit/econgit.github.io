<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>econgit</title>
    <link>https://econgit.github.io/ja/</link>
    <description>Recent content on econgit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 31 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://econgit.github.io/ja/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>良いコードを書くために気をつけること</title>
      <link>https://econgit.github.io/ja/post/2017/03/%E8%89%AF%E3%81%84%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%9F%E3%82%81%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://econgit.github.io/ja/post/2017/03/%E8%89%AF%E3%81%84%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%9F%E3%82%81%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/</guid>
      <description>はじめに 何かを学ぶ場合、最初は基礎から入るのが普通だ。つまり、その学ぶ事柄に関する動き構成するいくつかの要素の型を身につける。例えば、私が最初に水泳を習ったのは幼稚園の時だが、幼稚園にいる間の殆どの水泳の時間をキックの練習に使った。プールの縁に座って水を蹴ったり、ビート板を抱えて足の動きだけで前に進んだりするのだ。僕達が必死で足を動かしているあいだ、水泳の先生は生徒の足を持って足の動かし方を矯正していく。
なぜ、このようなカリキュラムになっているかというと、代表的な４つの泳法(背泳ぎ・平泳ぎ・バタフライ・クロール)に共通するのが足で水を蹴る動作だからだ。つまり、キックの習熟の良し悪しが泳法全てに影響してしまうのだ。何かを学ぶ時に基本的な動作に悪い癖がついたり、その重要性を認識していないと後々困ったことになる。
これに関連して、個人的にプログラムの勉強に関してはかなり後悔していることがある。 C++/C を真面目に学ばなかったことではない。コードの書き方（writing style）に無頓着だったのだ。プログラムは書くことより読まれることが多いと言われる 1。つまり、可読性（readability）を意識する必要がある。乱雑・非統一的・冗長なコードは有益なものになりにくい。
プログラミングをゼミで勉強したとき、このことの重要性をまったく認識していなかった。もしかして、誰かに言われたり、そういう本が出ているのを知っていたのかもしれない。多分、「はいはい、なるほどね」ぐらいで適当に流していたのだろう。普通の文章は、他人が読むことを意識して書くことが多いという事実を考えれば想像できそうなものなのだが。
良いコードを書く方法について勉強し始めたばかりなのだが2、いくつか勉強したことがあるのでここにメモしていきたいと思う。具体的には、QuantEconの中の1章のWriting Good CodeとKenji Satoさんから頂いた指摘、そしてRに関してはAdvanced RのStyle guideを参考に記事を作成した。守るべき原則を良くないコードの例を示して修正する形で記事をすすめていきたい。
守るべき原則 QuantEconの中のWriting Good Codeでは、良いコードを書くために守るべき教義が挙げられている。それは、
 マジックナンバーを使うべからず 繰り返すべからず (DRY: Don’t repeat yourself) 関数・クラスを使え グローバル変数を使うべからず  である。この４つを一つずつ説明していこう。
マジックナンバーを使うべからず ここでいうマジックナンバーとは、具体的な数字のことである3。例えば以下のコードを見てみよう。
 vector &amp;lt;- sample(1:99, 5) for (i in 1:5) { print(vector[i]) } ## [1] 9 ## [1] 30 ## [1] 82 ## [1] 52 ## [1] 14 出力にもあるように、このコードは適当な1-99のランダムな整数を入れたベクトル4を用意して、それをだすコードである。マジックナンバーとは、このコードでいうところの for(i in 1:5) の 5 の部分である。最初にベクトル vector を用意するときにと指定したのだが、具体的に数字を入れることで問題のあるコードになっている。具体的には、
 この 5 がどのような意味を持つ数字なのか ベクトルの長さが、例えば 100 に変わった時、for の中身も変更しなくてはいけない  という２点の問題がすぐに挙げられる。以下のように書き換えると読みやすくなる。</description>
    </item>
    
    <item>
      <title>なぜプログラムを書くのか</title>
      <link>https://econgit.github.io/ja/post/2017/03/why-write-a-code/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://econgit.github.io/ja/post/2017/03/why-write-a-code/</guid>
      <description>こんにちは econgit は git，GitHub，R，Python などデータ分析界隈で確固たる地位を固めてきた技術を，経済学教育に取り入れようという試みです。神戸大学経済学研究科の教員有志とTA により試験的に実施されています。あわよくばさらなる広まりを期待しています。
さて，なぜこんなことをしなければいけないのか？
 再現性に対する過小評価 プログラムで解決できる仕事はできるだけプログラムにやらせる，というのはよい心がけです。なぜなら，手作業は記録が難しく，レポートの再現可能性を損なってしまうから。例えば，日本の GDP の経年変化をグラフにしたいとしましょう。内閣府のページ から，例えば「国内総生産勘定」という項目をクリックすると次のようなExcelファイルをダウンロードできます。
 これに
27行目の数字を選択して， チャートの適当なボタンをクリック 横軸のデータとして，7行目の数字を選ぶ グラフを右クリックして保存  という手続きを行なってできたものが，次のグラフです。
 実に直感的ですね。しかし，このグラフはそのままでは使えないでしょう。 縦軸に単位が書いてないですし，横軸が少々つまりすぎて見づらいです。 レポートに貼り付けるような場合には，通常もう少し装飾的な要素を追加してから使用すると思います。
ダウンロードから上の図を作るまでの工程は，友人や同僚に指示しても再現できそうですが，次のグラフはどうでしょうか。
 私自身がどのように作ったかというと，「手探りでやってみたらなんとなく上手く行ったのでこれを採用しよう」と，軽い気持ちで選んだオプションを使っています。これを再現するのは一筋縄にいきそうにありません。実際にはこのようなグラフが他の人に再現できないとしても問題になることはないのでしょうが，一番の問題は，自分にも再現ができないということです。
次のような経験はないでしょうか。
 先生に「最新の確報を使ってグラフを作り直しなさい」と言われたけど，自分でもどうやって作ったのか忘れてしまったなあ 作り直そうと思ったら何時間もかかってしまった（or うまくいかなかった） このデータどこでダウンロードしてきたかなあ？？  そこでプログラミングの出番です。
 小さくはじめよう！ プログラミングは，同じ仕事をいつでも同じようにしてくれる強い味方です。
 同様の図を違うデータで作りたい 他人が同じ図を作れるようにドキュメント化したい  といった問題を解決してくれます。Excel でもプログラミング（VBA）をできるのですが，あまり普及していないようなので，思い切って環境を変えましょう。 データ分析と文字列操作が中心になるので，R や Python という扱いやすい言語を使うのがいいでしょう。 データサイエンス界隈では，R と Python を使ってビッグデータ・機械学習・ディープラーニングなどなどという話題が飛び交っています。（詳しくは知りません）。
プログラムはスケールを選びません。したがって，スモールデータに気負いすることもありません。とにかく最初のコードを書きましょう。
さて，先程のような図を描くコードはRでは次のように書くことができます。
# ダウンロードと読み込み library(readxl) download.file(&amp;quot;http://www.esri.cao.go.jp/jp/sna/data/data_list/kakuhou/files/h27/tables/27a1_jp.xls&amp;quot;, &amp;quot;27a1_jp.xls&amp;quot;) gdp_xls &amp;lt;- read_excel(&amp;quot;27a1_jp.xls&amp;quot;, sheet = 1, skip = 4) library(tidyverse) gdp0 &amp;lt;- gdp_xls[c(2, 22), 2:ncol(gdp_xls)] gdp &amp;lt;- as_tibble(cbind(t(gdp0))) %&amp;gt;% transmute(year = V1, gdp = V2) ggplot(gdp, aes(x = year, y = gdp, label = gdp)) + geom_line() + geom_point() + geom_text(vjust = 0, nudge_y = 800) + xlab(&amp;quot;GDP (10億円)&amp;quot;) + ylab(&amp;quot;年度&amp;quot;) + theme_light(base_family = &amp;quot;IPAGothic&amp;quot;) 最後の図は，ここで書かれたコードによる出力です。環境を整えさえすれば，友人や1年後の自分がこの図を再現することも容易なはずです。（パッケージの仕様が大きく変わらない限り，という註釈付きですが・・・・それは Excel を使っていても同じことでしょう）</description>
    </item>
    
    <item>
      <title>サンプル</title>
      <link>https://econgit.github.io/ja/post/2017/02/sample/</link>
      <pubDate>Fri, 17 Feb 2017 13:45:42 +0900</pubDate>
      
      <guid>https://econgit.github.io/ja/post/2017/02/sample/</guid>
      <description>This is a sample post.</description>
    </item>
    
    <item>
      <title>econgit について</title>
      <link>https://econgit.github.io/ja/about/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://econgit.github.io/ja/about/</guid>
      <description>This is econgit website.</description>
    </item>
    
  </channel>
</rss>